(()=>{"use strict";class e{setDisplayValue(t,s,i){e.mainDisplayDom.innerHTML=t.toString(),e.displayIncomeTotal.innerHTML=s.toString(),e.displayExpenseTotal.innerHTML=i.toString()}addBudgetItems(e,t){"income"==t&&console.log(e),"expense"==t&&console.log(e)}clearField(){e.descriptionDom.value=null,e.amountDom.value=null,e.descriptionDom.focus()}static formValidation(){""==e.descriptionDom.value||null==e.descriptionDom.value||""==e.amountDom.value||null==e.amountDom.value?e.submit.disabled=!0:e.submit.disabled=!1}budgetCardHtml(e,t,s,i){return`<div id="${t}" class="card mb-3"> <div class="card-header text-center d-flex justify-content-between"><span class="pl-5">${t}</span><span id="inc-${t}"  class="delete-button">X</span></div>\n    <div class="card-body"><ul class="list-group"><li class="list-group-item">${s}</li><li class="list-group-item list-group-item-${e?"success":"danger"}">$<span>${i}</span></li></ul> <button class="btn btn-dark mt-3" style="\n    ">Edit</button> </div></div>`}addToIncome(t){t.length>0&&(e.incomeColumn.innerHTML="",t.forEach((t=>{e.incomeColumn.innerHTML+=this.budgetCardHtml(!0,t.id,t.description,t.amount)}))),this.clearField()}clearColumns(){e.expenseColumn.innerHTML="",e.incomeColumn.innerHTML=""}addToExpense(t){console.log(t),t.length>0&&(e.expenseColumn.innerHTML="",t.forEach((t=>{e.expenseColumn.innerHTML+=this.budgetCardHtml(!1,t.id,t.description,t.amount)}))),this.clearField()}}e.mainDisplayDom=document.getElementById("main-display"),e.displayIncomeTotal=document.getElementById("income-display"),e.displayExpenseTotal=document.getElementById("expense-display"),e.expenseColumn=document.getElementById("expense-column"),e.incomeColumn=document.getElementById("income-column"),e.descriptionDom=document.getElementById("description"),e.amountDom=document.getElementById("amount"),e.type=document.getElementById("type"),e.submit=document.getElementById("submit"),e.email_login=document.getElementById("email_login"),e.email_register=document.getElementById("email_register"),e.password_login=document.getElementById("password_login"),e.password_register=document.getElementById("password_register"),e.submit_user_register=document.getElementById("submit_user_register"),e.submit_user_login=document.getElementById("submit_user_login"),e.closeSignInBtn=document.getElementById("close-signin"),e.closeRegisterBtn=document.getElementById("close-signup");class t{constructor(e,t,s,i,l,n){this.id=e,this.userId=t,this.date=s,this.description=i,this.amount=l,this.type=n}}const s="https://localhost:7242/api/Users/",i="https://localhost:7242/api/Budget/",l="https://localhost:7242/api/Budget/get_last_item/";var n=function(e,t,s,i){return new(s||(s=Promise))((function(l,n){function o(e){try{d(i.next(e))}catch(e){n(e)}}function a(e){try{d(i.throw(e))}catch(e){n(e)}}function d(e){var t;e.done?l(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(o,a)}d((i=i.apply(e,t||[])).next())}))};class o{get(){return fetch(i).then((e=>e.json())).then((e=>e)).catch((e=>console.error(e)))}getLastItem(e){return fetch(l+e).then((e=>e.json())).then((e=>e)).catch((e=>console.error(e)))}put(e,t){console.log(`id:${e} ${t}`)}post(e){return n(this,void 0,void 0,(function*(){delete e.id,delete e.date,console.log("Post ran"),yield fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e.userId,description:e.description,amount:e.amount,type:e.type})}).then((e=>e.json()))}))}delete(e){return n(this,void 0,void 0,(function*(){console.log("delete request sent"),yield fetch(i+e,{method:"DELETE"}).then((e=>e.json)).then((e=>console.log(e)))}))}}class a{constructor(e,t,s){this.dal=new o,this.uuid=()=>"xxxxxxxx-4xxx-yxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)})),this.total=e,this.expenseTotal=t,this.incomeTotal=s,this.allExp=[],this.allinc=[]}setTotals(e,t){"income"==t&&(this.incomeTotal+=e,this.total+=e),"expense"==t&&(this.expenseTotal+=e,this.total-=e)}incomeDelete(){for(let t=0;t<e.incomeColumn.children.length;t++){let s=e.incomeColumn.children[t].children[0].children[1].id;document.getElementById(s).addEventListener("click",(()=>{this.allinc.forEach((t=>{if(parseInt(s.split("-",2)[1])==t.id){let s=this.allinc.indexOf(t);this.allinc.splice(s,1),e.incomeColumn.removeChild(e.incomeColumn.children[s]),this.dal.delete(parseInt(t.id))}}))}))}}expenseDelete(){for(let t=0;t<e.expenseColumn.children.length;t++){let s=e.expenseColumn.children[t].children[0].children[1].id;document.getElementById(s).addEventListener("click",(()=>{this.allExp.forEach((t=>{if(parseInt(s.split("-",2)[1])==t.id){let s=this.allExp.indexOf(t);this.allExp.splice(s,1),e.expenseColumn.removeChild(e.expenseColumn.children[s]),this.dal.delete(parseInt(t.id))}}))}))}}eventListenersDelete(){this.expenseDelete(),this.incomeDelete()}getTotals(){return{total:this.total,expenseTotal:this.expenseTotal,incomeTotal:this.incomeTotal}}clearAllData(){this.total=0,this.allExp=[],this.allinc=[],this.expenseTotal=0,this.incomeTotal=0}calculateTotals(){this.allExp.forEach((e=>{this.setTotals(e.amount,e.type)})),this.allinc.forEach((e=>{this.setTotals(e.amount,e.type)}))}getAllExp(){return this.allExp}getAllInc(){return this.allinc}saveDataToArr(e,s,i,l,n,o){console.log(i);let a=new t(e,s,i,l,n,o);"expense"==o&&this.allExp.push(a),"income"==o&&this.allinc.push(a)}}class d{constructor(e,t){this.email=e,this.password=t}}class r extends d{}class c{constructor(e){this.apiUrl=e}RegisterUser(e){fetch(this.apiUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e.email,password:e.password})}).then((e=>e.json()))}LoginUser(e){return fetch("https://localhost:7242/api/Users/get_user_id",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e.email,password:e.password})}).then((e=>e.json())).then((e=>e)).catch((e=>console.error(e)))}}const m=new class{setUserId(e){this.userId=e}setAllExp(e){this.allExp=e}setAllInc(e){this.allInc=e}setTotal(e){this.total=e}};var h=function(e,t,s,i){return new(s||(s=Promise))((function(l,n){function o(e){try{d(i.next(e))}catch(e){n(e)}}function a(e){try{d(i.throw(e))}catch(e){n(e)}}function d(e){var t;e.done?l(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(o,a)}d((i=i.apply(e,t||[])).next())}))};class u{constructor(t,i,l,n){this.userDal=new c(s),this.view=new e,this.model=new a(0,0,0),this.registerEmail=t,this.registerPassword=i,this.loginEmail=l,this.loginPassword=n}getUserId(){return this.userId}loadFromDb(e){return h(this,void 0,void 0,(function*(){let t=new o;this.userId=e,(yield t.get()).forEach((e=>{this.model.saveDataToArr(e.id,this.userId,e.date,e.description,e.amount,e.type),this.view.addToIncome(this.model.getAllInc()),this.view.addToExpense(this.model.getAllExp()),this.model.setTotals(e.amount,e.type)})),m.userId=parseInt(e),m.allExp=this.model.getAllExp(),m.allInc=this.model.getAllInc(),m.total=this.model.getTotals().total,m.expenseTotal=this.model.getTotals().expenseTotal,m.incomeTotal=this.model.getTotals().incomeTotal,this.view.setDisplayValue(this.model.total,this.model.incomeTotal,this.model.expenseTotal),this.model.eventListenersDelete()}))}registerUser(){this.userDal.RegisterUser(new r(this.registerEmail.value,this.registerPassword.value)),this.view.clearColumns(),this.model.clearAllData(),e.closeRegisterBtn.click()}signUserIn(){return h(this,void 0,void 0,(function*(){this.userId=JSON.stringify(yield this.userDal.LoginUser(new d(this.loginEmail.value,this.loginPassword.value))).toString(),this.view.clearColumns(),this.model.clearAllData(),this.loadFromDb(this.userId),this.loginEmail.value=null,this.loginPassword.value=null,e.closeSignInBtn.click()}))}}(new class{constructor(){this.model=new a(0,0,0),this.view=new e,this.apiUrlBudget=i,this.dal=new o,this.userForm=new u(e.email_register,e.password_register,e.email_login,e.password_login)}guestMode(){}userAccountMode(){}syncModelWithState(){this.model.userId=m.userId,this.model.allExp=m.allExp,this.model.allinc=m.allInc,this.model.total=m.total,this.model.incomeTotal=m.incomeTotal,this.model.expenseTotal=m.expenseTotal}syncStateWithModel(){m.userId=this.model.userId,m.allExp=this.model.allExp,m.allInc=this.model.allinc,m.total=this.model.total,m.incomeTotal=this.model.incomeTotal,m.expenseTotal=this.model.expenseTotal}postToDb(){return s=this,i=void 0,n=function*(){let s=parseInt(e.amountDom.value);yield this.dal.post(new t(null,this.model.userId,null,e.descriptionDom.value,s,e.type.value)),this.getLastItem()},new((l=void 0)||(l=Promise))((function(e,t){function o(e){try{d(n.next(e))}catch(e){t(e)}}function a(e){try{d(n.throw(e))}catch(e){t(e)}}function d(t){var s;t.done?e(t.value):(s=t.value,s instanceof l?s:new l((function(e){e(s)}))).then(o,a)}d((n=n.apply(s,i||[])).next())}));var s,i,l,n}getLastItem(){let t=parseInt(e.amountDom.value);this.dal.getLastItem(this.model.userId).then((s=>{this.model.saveDataToArr(s.id,s.userId,s.date,s.description,s.amount,s.type),this.model.setTotals(t,e.type.value),this.view.setDisplayValue(this.model.total,this.model.incomeTotal,this.model.expenseTotal),this.view.addToIncome(this.model.getAllInc()),this.view.addToExpense(this.model.getAllExp()),this.syncStateWithModel(),console.log(m),this.model.eventListenersDelete()}))}init(){this.view.setDisplayValue(this.model.total,this.model.incomeTotal,this.model.expenseTotal),e.submit.addEventListener("click",(()=>{this.syncModelWithState(),e.submit.disabled=!0,this.model.userId=parseInt(this.userForm.getUserId()),this.postToDb()})),e.descriptionDom.addEventListener("keyup",(function(){e.formValidation()})),e.amountDom.addEventListener("keyup",(function(){e.formValidation()})),e.submit.disabled=!0,e.submit_user_register.addEventListener("click",(e=>{e.preventDefault(),this.userForm.registerUser(),console.log(this.userForm)})),e.submit_user_login.addEventListener("click",(e=>{e.preventDefault(),this.userForm.signUserIn()}))}}).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,